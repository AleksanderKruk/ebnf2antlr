Module: VersionDecl?(LibraryModule|MainModule);
VersionDecl: 'xquery'(('encoding'StringLiteral)|('version'StringLiteral('encoding'StringLiteral)?))Separator;
MainModule: PrologQueryBody;
LibraryModule: ModuleDeclProlog;
ModuleDecl: 'module''namespace'NCName'='URILiteralSeparator;
Prolog: ((DefaultNamespaceDecl|Setter|NamespaceDecl|Import)Separator)*((ContextItemDecl|AnnotatedDecl|OptionDecl)Separator)*;
Separator: ';';
Setter: BoundarySpaceDecl|DefaultCollationDecl|BaseURIDecl|ConstructionDecl|OrderingModeDecl|EmptyOrderDecl|CopyNamespacesDecl|DecimalFormatDecl;
BoundarySpaceDecl: 'declare''boundary-space'('preserve'|'strip');
DefaultCollationDecl: 'declare''default''collation'URILiteral;
BaseURIDecl: 'declare''base-uri'URILiteral;
ConstructionDecl: 'declare''construction'('strip'|'preserve');
OrderingModeDecl: 'declare''ordering'('ordered'|'unordered');
EmptyOrderDecl: 'declare''default''order''empty'('greatest'|'least');
CopyNamespacesDecl: 'declare''copy-namespaces'PreserveMode','InheritMode;
PreserveMode: 'preserve'|'no-preserve';
InheritMode: 'inherit'|'no-inherit';
DecimalFormatDecl: 'declare'(('decimal-format'EQName)|('default''decimal-format'))(DFPropertyName'='StringLiteral)*;
DFPropertyName: 'decimal-separator'|'grouping-separator'|'infinity'|'minus-sign'|'NaN'|'percent'|'per-mille'|'zero-digit'|'digit'|'pattern-separator'|'exponent-separator';
Import: SchemaImport|ModuleImport;
SchemaImport: 'import''schema'SchemaPrefix?URILiteral('at'URILiteral(','URILiteral)*)?;
SchemaPrefix: ('namespace'NCName'=')|('default''element''namespace');
ModuleImport: 'import''module'('namespace'NCName'=')?URILiteral('at'URILiteral(','URILiteral)*)?;
NamespaceDecl: 'declare''namespace'NCName'='URILiteral;
DefaultNamespaceDecl: 'declare''default'('element'|'function')'namespace'URILiteral;
AnnotatedDecl: 'declare'Annotation*(VarDecl|FunctionDecl);
Annotation: '%'EQName('('Literal(','Literal)*')')?;
VarDecl: 'variable''$'VarNameTypeDeclaration?((':='VarValue)|('external'(':='VarDefaultValue)?));
VarValue: ExprSingle;
VarDefaultValue: ExprSingle;
ContextItemDecl: 'declare''context''item'('as'ItemType)?((':='VarValue)|('external'(':='VarDefaultValue)?));
FunctionDecl: 'function'EQName'('ParamList?')'('as'SequenceType)?(FunctionBody|'external');
ParamList: Param(','Param)*;
Param: '$'EQNameTypeDeclaration?;
FunctionBody: EnclosedExpr;
EnclosedExpr: '{'Expr?'}';
OptionDecl: 'declare''option'EQNameStringLiteral;
QueryBody: Expr;
Expr: ExprSingle(','ExprSingle)*;
ExprSingle: FLWORExpr|QuantifiedExpr|SwitchExpr|TypeswitchExpr|IfExpr|TryCatchExpr|OrExpr;
FLWORExpr: InitialClauseIntermediateClause*ReturnClause;
InitialClause: ForClause|LetClause|WindowClause;
IntermediateClause: InitialClause|WhereClause|GroupByClause|OrderByClause|CountClause;
ForClause: 'for'ForBinding(','ForBinding)*;
ForBinding: '$'VarNameTypeDeclaration?AllowingEmpty?PositionalVar?'in'ExprSingle;
AllowingEmpty: 'allowing''empty';
PositionalVar: 'at''$'VarName;
LetClause: 'let'LetBinding(','LetBinding)*;
LetBinding: '$'VarNameTypeDeclaration?':='ExprSingle;
WindowClause: 'for'(TumblingWindowClause|SlidingWindowClause);
TumblingWindowClause: 'tumbling''window''$'VarNameTypeDeclaration?'in'ExprSingleWindowStartConditionWindowEndCondition?;
SlidingWindowClause: 'sliding''window''$'VarNameTypeDeclaration?'in'ExprSingleWindowStartConditionWindowEndCondition;
WindowStartCondition: 'start'WindowVars'when'ExprSingle;
WindowEndCondition: 'only'?'end'WindowVars'when'ExprSingle;
WindowVars: ('$'CurrentItem)?PositionalVar?('previous''$'PreviousItem)?('next''$'NextItem)?;
CurrentItem: EQName;
PreviousItem: EQName;
NextItem: EQName;
CountClause: 'count''$'VarName;
WhereClause: 'where'ExprSingle;
GroupByClause: 'group''by'GroupingSpecList;
GroupingSpecList: GroupingSpec(','GroupingSpec)*;
GroupingSpec: GroupingVariable(TypeDeclaration?':='ExprSingle)?('collation'URILiteral)?;
GroupingVariable: '$'VarName;
OrderByClause: (('order''by')|('stable''order''by'))OrderSpecList;
OrderSpecList: OrderSpec(','OrderSpec)*;
OrderSpec: ExprSingleOrderModifier;
OrderModifier: ('ascending'|'descending')?('empty'('greatest'|'least'))?('collation'URILiteral)?;
ReturnClause: 'return'ExprSingle;
QuantifiedExpr: ('some'|'every')'$'VarNameTypeDeclaration?'in'ExprSingle(',''$'VarNameTypeDeclaration?'in'ExprSingle)*'satisfies'ExprSingle;
SwitchExpr: 'switch''('Expr')'SwitchCaseClause+'default''return'ExprSingle;
SwitchCaseClause: ('case'SwitchCaseOperand)+'return'ExprSingle;
SwitchCaseOperand: ExprSingle;
TypeswitchExpr: 'typeswitch''('Expr')'CaseClause+'default'('$'VarName)?'return'ExprSingle;
CaseClause: 'case'('$'VarName'as')?SequenceTypeUnion'return'ExprSingle;
SequenceTypeUnion: SequenceType('|'SequenceType)*;
IfExpr: 'if''('Expr')''then'ExprSingle'else'ExprSingle;
TryCatchExpr: TryClauseCatchClause+;
TryClause: 'try'EnclosedTryTargetExpr;
EnclosedTryTargetExpr: EnclosedExpr;
CatchClause: 'catch'CatchErrorListEnclosedExpr;
CatchErrorList: NameTest('|'NameTest)*;
OrExpr: AndExpr('or'AndExpr)*;
AndExpr: ComparisonExpr('and'ComparisonExpr)*;
ComparisonExpr: StringConcatExpr((ValueComp|GeneralComp|NodeComp)StringConcatExpr)?;
StringConcatExpr: RangeExpr('||'RangeExpr)*;
RangeExpr: AdditiveExpr('to'AdditiveExpr)?;
AdditiveExpr: MultiplicativeExpr(('+'|'-')MultiplicativeExpr)*;
MultiplicativeExpr: UnionExpr(('*'|'div'|'idiv'|'mod')UnionExpr)*;
UnionExpr: IntersectExceptExpr(('union'|'|')IntersectExceptExpr)*;
IntersectExceptExpr: InstanceofExpr(('intersect'|'except')InstanceofExpr)*;
InstanceofExpr: TreatExpr('instance''of'SequenceType)?;
TreatExpr: CastableExpr('treat''as'SequenceType)?;
CastableExpr: CastExpr('castable''as'SingleType)?;
CastExpr: ArrowExpr('cast''as'SingleType)?;
ArrowExpr: UnaryExpr('=>'ArrowFunctionSpecifierArgumentList)*;
UnaryExpr: ('-'|'+')*ValueExpr;
ValueExpr: ValidateExpr|ExtensionExpr|SimpleMapExpr;
GeneralComp: '='|'!='|'<'|'<='|'>'|'>=';
ValueComp: 'eq'|'ne'|'lt'|'le'|'gt'|'ge';
NodeComp: 'is'|'<<'|'>>';
ValidateExpr: 'validate'(ValidationMode|('type'TypeName))?'{'Expr'}';
ValidationMode: 'lax'|'strict';
ExtensionExpr: Pragma+'{'Expr?'}';
Pragma: '(#'S?EQName(SPragmaContents)?'#)';
PragmaContents: (Char*-(Char*'#)'Char*));
SimpleMapExpr: PathExpr('!'PathExpr)*;
PathExpr: ('/'RelativePathExpr?)|('//'RelativePathExpr)|RelativePathExpr;
RelativePathExpr: StepExpr(('/'|'//')StepExpr)*;
StepExpr: PostfixExpr|AxisStep;
AxisStep: (ReverseStep|ForwardStep)PredicateList;
ForwardStep: (ForwardAxisNodeTest)|AbbrevForwardStep;
ForwardAxis: ('child''::')|('descendant''::')|('attribute''::')|('self''::')|('descendant-or-self''::')|('following-sibling''::')|('following''::');
AbbrevForwardStep: '@'?NodeTest;
ReverseStep: (ReverseAxisNodeTest)|AbbrevReverseStep;
ReverseAxis: ('parent''::')|('ancestor''::')|('preceding-sibling''::')|('preceding''::')|('ancestor-or-self''::');
AbbrevReverseStep: '..';
NodeTest: KindTest|NameTest;
NameTest: EQName|Wildcard;
Wildcard: '*'|(NCName':*')|('*:'NCName)|(BracedURILiteral'*');
PostfixExpr: PrimaryExpr(Predicate|ArgumentList|Lookup)*;
ArgumentList: '('(Argument(','Argument)*)?')';
PredicateList: Predicate*;
Predicate: '['Expr']';
Lookup: '?'KeySpecifier;
KeySpecifier: NCName|IntegerLiteral|ParenthesizedExpr|'*';
ArrowFunctionSpecifier: EQName|VarRef|ParenthesizedExpr;
PrimaryExpr: Literal|VarRef|ParenthesizedExpr|ContextItemExpr|FunctionCall|OrderedExpr|UnorderedExpr|NodeConstructor|FunctionItemExpr|MapConstructor|ArrayConstructor|StringConstructor|UnaryLookup;
Literal: NumericLiteral|StringLiteral;
NumericLiteral: IntegerLiteral|DecimalLiteral|DoubleLiteral;
VarRef: '$'VarName;
VarName: EQName;
ParenthesizedExpr: '('Expr?')';
ContextItemExpr: '.';
OrderedExpr: 'ordered'EnclosedExpr;
UnorderedExpr: 'unordered'EnclosedExpr;
FunctionCall: EQNameArgumentList;
Argument: ExprSingle|ArgumentPlaceholder;
ArgumentPlaceholder: '?';
NodeConstructor: DirectConstructor|ComputedConstructor;
DirectConstructor: DirElemConstructor|DirCommentConstructor|DirPIConstructor;
DirElemConstructor: '<'QNameDirAttributeList('/>'|('>'DirElemContent*'</'QNameS?'>'));
DirAttributeList: (S(QNameS?'='S?DirAttributeValue)?)*;
DirAttributeValue: ('''(EscapeQuot|QuotAttrValueContent)*''')|('''(EscapeApos|AposAttrValueContent)*''');
QuotAttrValueContent: QuotAttrContentChar|CommonContent;
AposAttrValueContent: AposAttrContentChar|CommonContent;
DirElemContent: DirectConstructor|CDataSection|CommonContent|ElementContentChar;
CommonContent: PredefinedEntityRef|CharRef|'{{'|'}}'|EnclosedExpr;
DirCommentConstructor: '<!--'DirCommentContents'-->';
DirCommentContents: ((Char-'-')|('-'(Char-'-')))*;
DirPIConstructor: '<?'PITarget(SDirPIContents)?'?>';
DirPIContents: (Char*-(Char*'?>'Char*));
CDataSection: '<![CDATA['CDataSectionContents']]>';
CDataSectionContents: (Char*-(Char*']]>'Char*));
ComputedConstructor: CompDocConstructor|CompElemConstructor|CompAttrConstructor|CompNamespaceConstructor|CompTextConstructor|CompCommentConstructor|CompPIConstructor;
CompDocConstructor: 'document'EnclosedExpr;
CompElemConstructor: 'element'(EQName|('{'Expr'}'))EnclosedContentExpr;
EnclosedContentExpr: EnclosedExpr;
CompAttrConstructor: 'attribute'(EQName|('{'Expr'}'))EnclosedExpr;
CompNamespaceConstructor: 'namespace'(Prefix|EnclosedPrefixExpr)EnclosedURIExpr;
Prefix: NCName;
EnclosedPrefixExpr: EnclosedExpr;
EnclosedURIExpr: EnclosedExpr;
CompTextConstructor: 'text'EnclosedExpr;
CompCommentConstructor: 'comment'EnclosedExpr;
CompPIConstructor: 'processing-instruction'(NCName|('{'Expr'}'))EnclosedExpr;
FunctionItemExpr: NamedFunctionRef|InlineFunctionExpr;
NamedFunctionRef: EQName'#'IntegerLiteral;
InlineFunctionExpr: Annotation*'function''('ParamList?')'('as'SequenceType)?FunctionBody;
MapConstructor: 'map''{'(MapConstructorEntry(','MapConstructorEntry)*)?'}';
MapConstructorEntry: MapKeyExpr':'MapValueExpr;
MapKeyExpr: ExprSingle;
MapValueExpr: ExprSingle;
ArrayConstructor: SquareArrayConstructor|CurlyArrayConstructor;
SquareArrayConstructor: '['(ExprSingle(','ExprSingle)*)?']';
CurlyArrayConstructor: 'array'EnclosedExpr;
StringConstructor: '``['StringConstructorContent']``';
StringConstructorContent: StringConstructorChars(StringConstructorInterpolationStringConstructorChars)*;
StringConstructorChars: (Char*-(Char*('`{'|']``')Char*));
StringConstructorInterpolation: '`{'Expr?'}`';
UnaryLookup: '?'KeySpecifier;
SingleType: SimpleTypeName'?'?;
TypeDeclaration: 'as'SequenceType;
SequenceType: ('empty-sequence''('')')|(ItemTypeOccurrenceIndicator?);
OccurrenceIndicator: '?'|'*'|'+';
ItemType: KindTest|('item''('')')|FunctionTest|MapTest|ArrayTest|AtomicOrUnionType|ParenthesizedItemType;
AtomicOrUnionType: EQName;
KindTest: DocumentTest|ElementTest|AttributeTest|SchemaElementTest|SchemaAttributeTest|PITest|CommentTest|TextTest|NamespaceNodeTest|AnyKindTest;
AnyKindTest: 'node''('')';
DocumentTest: 'document-node''('(ElementTest|SchemaElementTest)?')';
TextTest: 'text''('')';
CommentTest: 'comment''('')';
NamespaceNodeTest: 'namespace-node''('')';
PITest: 'processing-instruction''('(NCName|StringLiteral)?')';
AttributeTest: 'attribute''('(AttribNameOrWildcard(','TypeName)?)?')';
AttribNameOrWildcard: AttributeName|'*';
SchemaAttributeTest: 'schema-attribute''('AttributeDeclaration')';
AttributeDeclaration: AttributeName;
ElementTest: 'element''('(ElementNameOrWildcard(','TypeName'?'?)?)?')';
ElementNameOrWildcard: ElementName|'*';
SchemaElementTest: 'schema-element''('ElementDeclaration')';
ElementDeclaration: ElementName;
AttributeName: EQName;
ElementName: EQName;
SimpleTypeName: TypeName;
TypeName: EQName;
FunctionTest: Annotation*(AnyFunctionTest|TypedFunctionTest);
AnyFunctionTest: 'function''(''*'')';
TypedFunctionTest: 'function''('(SequenceType(','SequenceType)*)?')''as'SequenceType;
MapTest: AnyMapTest|TypedMapTest;
AnyMapTest: 'map''(''*'')';
TypedMapTest: 'map''('AtomicOrUnionType','SequenceType')';
ArrayTest: AnyArrayTest|TypedArrayTest;
AnyArrayTest: 'array''(''*'')';
TypedArrayTest: 'array''('SequenceType')';
ParenthesizedItemType: '('ItemType')';
URILiteral: StringLiteral;
EQName: QName|URIQualifiedName;
